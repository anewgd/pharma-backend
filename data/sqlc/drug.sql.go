// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: drug.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDrug = `-- name: CreateDrug :one
INSERT INTO drugs (
  pharmacy_branch_id,
  brand_name,
  generic_name,
  quantity,
  expiration_date,
  manufacturing_date,
  pharmacist_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING drug_id, pharmacy_branch_id, brand_name, generic_name, quantity, expiration_date, manufacturing_date, pharmacist_id, added_at
`

type CreateDrugParams struct {
	PharmacyBranchID  uuid.UUID `json:"pharmacy_branch_id"`
	BrandName         string    `json:"brand_name"`
	GenericName       string    `json:"generic_name"`
	Quantity          int64     `json:"quantity"`
	ExpirationDate    time.Time `json:"expiration_date"`
	ManufacturingDate time.Time `json:"manufacturing_date"`
	PharmacistID      uuid.UUID `json:"pharmacist_id"`
}

func (q *Queries) CreateDrug(ctx context.Context, arg CreateDrugParams) (Drug, error) {
	row := q.db.QueryRow(ctx, createDrug,
		arg.PharmacyBranchID,
		arg.BrandName,
		arg.GenericName,
		arg.Quantity,
		arg.ExpirationDate,
		arg.ManufacturingDate,
		arg.PharmacistID,
	)
	var i Drug
	err := row.Scan(
		&i.DrugID,
		&i.PharmacyBranchID,
		&i.BrandName,
		&i.GenericName,
		&i.Quantity,
		&i.ExpirationDate,
		&i.ManufacturingDate,
		&i.PharmacistID,
		&i.AddedAt,
	)
	return i, err
}
