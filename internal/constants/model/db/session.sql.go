// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPharmacistSession = `-- name: CreatePharmacistSession :one
INSERT INTO pharmacist_sessions (
    session_id,
    pharmacist_id,
    refresh_token,
    expires_at
) VALUES (
  $1, $2, $3, $4
) RETURNING session_id, pharmacist_id, refresh_token, is_blocked, expires_at, created_at, updated_at
`

type CreatePharmacistSessionParams struct {
	SessionID    uuid.UUID `json:"session_id"`
	PharmacistID uuid.UUID `json:"pharmacist_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreatePharmacistSession(ctx context.Context, arg CreatePharmacistSessionParams) (PharmacistSession, error) {
	row := q.db.QueryRow(ctx, createPharmacistSession,
		arg.SessionID,
		arg.PharmacistID,
		arg.RefreshToken,
		arg.ExpiresAt,
	)
	var i PharmacistSession
	err := row.Scan(
		&i.SessionID,
		&i.PharmacistID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSession = `-- name: CreateUserSession :one
INSERT INTO user_sessions (
    user_id,
    refresh_token,
    expires_at
) VALUES (
  $1, $2, $3
) RETURNING session_id, user_id, refresh_token, is_blocked, expires_at, created_at, updated_at
`

type CreateUserSessionParams struct {
	UserID       uuid.UUID `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateUserSession(ctx context.Context, arg CreateUserSessionParams) (UserSession, error) {
	row := q.db.QueryRow(ctx, createUserSession, arg.UserID, arg.RefreshToken, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllPharmacistSessions = `-- name: DeleteAllPharmacistSessions :exec
TRUNCATE pharmacist_sessions
`

func (q *Queries) DeleteAllPharmacistSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllPharmacistSessions)
	return err
}

const deleteAllUserSessions = `-- name: DeleteAllUserSessions :exec
TRUNCATE user_sessions
`

func (q *Queries) DeleteAllUserSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllUserSessions)
	return err
}

const deletePharmacistSession = `-- name: DeletePharmacistSession :exec
DELETE FROM pharmacist_sessions
WHERE pharmacist_id = $1
`

func (q *Queries) DeletePharmacistSession(ctx context.Context, pharmacistID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePharmacistSession, pharmacistID)
	return err
}

const deleteUserSession = `-- name: DeleteUserSession :exec
DELETE FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) DeleteUserSession(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUserSession, userID)
	return err
}

const getPharmacistSession = `-- name: GetPharmacistSession :one
SELECT session_id, pharmacist_id, refresh_token, is_blocked, expires_at, created_at, updated_at FROM pharmacist_sessions
WHERE session_id = $1 LIMIT 1
`

func (q *Queries) GetPharmacistSession(ctx context.Context, sessionID uuid.UUID) (PharmacistSession, error) {
	row := q.db.QueryRow(ctx, getPharmacistSession, sessionID)
	var i PharmacistSession
	err := row.Scan(
		&i.SessionID,
		&i.PharmacistID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSession = `-- name: GetUserSession :one
SELECT session_id, user_id, refresh_token, is_blocked, expires_at, created_at, updated_at FROM user_sessions
WHERE session_id = $1 LIMIT 1
`

func (q *Queries) GetUserSession(ctx context.Context, sessionID uuid.UUID) (UserSession, error) {
	row := q.db.QueryRow(ctx, getUserSession, sessionID)
	var i UserSession
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.RefreshToken,
		&i.IsBlocked,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
